name: Fly Deploy
on:
  push:
    branches:
      - main
      - 91-setup-github-workflow-for-fly-cicd
    paths:
      - 'src/**'
      - '.github/**'
      - 'Dockerfile'

jobs:
  deploy_production:
    name: Deploy production
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Prepare
        id: prep
        run: |
          TAG=$(echo $GITHUB_SHA | head -c7)
          IMAGE="my-springboot-app" # Replace with your desired Docker image name
          echo ::set-output name=tagged_image::${IMAGE}:${TAG}
          echo ::set-output name=tag::${TAG}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master
        with:
          install: true

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-multi-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-multi-buildx

      - name: Build production image
        uses: docker/build-push-action@v2
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: ./Dockerfile # Update with the path to your Dockerfile
          target: app # Update with your Dockerfile target if needed
          load: true
          tags: ${{ steps.prep.outputs.tagged_image }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Deploy to Fly.io
        uses: superfly/flyctl-actions@master
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        with:
          args: deploy --config ./fly.prod.toml --image ${{ steps.prep.outputs.tagged_image }}
#jobs:
#  deploy:
#    name: Deploy app
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v3
#      - uses: superfly/flyctl-actions/setup-flyctl@master
#      - run: flyctl deploy --remote-only
#        env:
#          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
